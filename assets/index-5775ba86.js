var m=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function d(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var a=63710088e-1,l={centimeters:a*100,centimetres:a*100,degrees:a/111325,feet:a*3.28084,inches:a*39.37,kilometers:a/1e3,kilometres:a/1e3,meters:a,metres:a,miles:a/1609.344,millimeters:a*1e3,millimetres:a*1e3,nauticalmiles:a/1852,radians:1,yards:a*1.0936};function s(e,r,t){t===void 0&&(t={});var i={type:"Feature"};return(t.id===0||t.id)&&(i.id=t.id),t.bbox&&(i.bbox=t.bbox),i.properties=r||{},i.geometry=e,i}function h(e,r,t){if(t===void 0&&(t={}),!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!u(e[0])||!u(e[1]))throw new Error("coordinates must contain numbers");var i={type:"Point",coordinates:e};return s(i,r,t)}function b(e,r,t){t===void 0&&(t={});for(var i=0,f=e;i<f.length;i++){var n=f[i];if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var o=0;o<n[n.length-1].length;o++)if(n[n.length-1][o]!==n[0][o])throw new Error("First and last Position are not equivalent.")}var y={type:"Polygon",coordinates:e};return s(y,r,t)}function c(e,r){r===void 0&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function g(e,r){r===void 0&&(r="kilometers");var t=l[r];if(!t)throw new Error(r+" units is invalid");return e*t}function w(e,r){r===void 0&&(r="kilometers");var t=l[r];if(!t)throw new Error(r+" units is invalid");return e/t}function v(e){var r=e%(2*Math.PI);return r*180/Math.PI}function A(e){var r=e%360;return r*Math.PI/180}function u(e){return!isNaN(e)&&e!==null&&!Array.isArray(e)}function p(e){return!!e&&e.constructor===Object}function E(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if(e.type==="Feature"&&e.geometry!==null&&e.geometry.type==="Point")return e.geometry.coordinates;if(e.type==="Point")return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function P(e){if(Array.isArray(e))return e;if(e.type==="Feature"){if(e.geometry!==null)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function F(e){return e.type==="Feature"?e.geometry:e}function C(e,r){return e.type==="FeatureCollection"?"FeatureCollection":e.type==="GeometryCollection"?"GeometryCollection":e.type==="Feature"&&e.geometry!==null?e.geometry.type:e.type}export{C as a,P as b,m as c,c as d,a as e,s as f,d as g,E as h,p as i,A as j,v as k,w as l,b as m,F as n,h as p,g as r};
